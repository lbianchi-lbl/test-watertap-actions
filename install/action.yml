name: Install WaterTAP
description: Install WaterTAP

inputs:

  conda-environment:
    required: false
    description: |
      Name of the Conda environment to use for the installation. If empty (default), Conda will not be used and the system Python will be used instead
    default: ''

  python-version:
    required: true
    description: Python version to be installed in the environment

  variant:
    required: true
    description: |
      Which installation variant to use. Choices: "dev", "site"

  target:
    required: false
    description: |
      Argument to pass to `pip install`. If empty (default), it will be determined automatically
    default: ''

  repository:
    required: false
    description: Full name (i.e. user/repo) of the repository to install
    default: watertap-org/watertap

  ref:
    required: false
    description: |
      Git ref to install
    default: main

  python-distribution-name:
    description: Name of the Python package distribution, as it appears on e.g. PyPI
    required: false
    default: watertap

  solver-dependencies:
    required: false
    description: How to install solver dependencies. If "idaes-ext", the `idaes get-extensions` command will be used.
    default: idaes-ext

  install-script:
    required: false
    description: Name to use for the autogenerated install script
    default: install.sh

  collect-info:
    required: false
    description: Directory and artifact name where environment info will be saved to
    default: .environment-info

runs:
  using: composite
  steps:

    - name: Create collect-info directory
      if: inputs.collect-info
      shell: bash
      run: mkdir -v "${{ inputs.collect-info }}"

    - name: Setup Python (without Conda env)
      if: ${{ !inputs.conda-environment }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install missing build dependencies
      if: ${{ !inputs.conda-environment }}
      shell: bash -l {0}
      run: |
        echo "::group::Output of 'pip install'"
        pip install --progress-bar off wheel
        echo "::endgroup::"

    - name: Setup Python in Conda env
      if: inputs.conda-environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: ${{ inputs.conda-environment }}
        python-version: ${{ inputs.python-version }}

    - name: Set up install script (${{ inputs.variant }})
      if: inputs.variant == 'dev'
      shell: bash -l {0}
      run: |
        cat << EOF > ${{ inputs.install-script }}
        pip install -r requirements-dev.txt
        EOF

    - name: Set up install script (${{ inputs.variant }})
      if: inputs.variant == 'site'
      shell: bash -l {0}
      env:
        repository_url: https://github.com/${{ inputs.repository }}
        ref: ${{ inputs.ref || github.ref }}
      run: |
        cat << EOF > ${{ inputs.install-script }}
        pip install "watertap[testing] @ git+${repository_url}@${ref}"
        EOF

    - name: Invoke install command
      shell: bash -l {0}
      env:
        PIP_PROGRESS_BAR: "off"
        path: ${{ inputs.install-script }}
      run: |
        cat "$path"
        echo "::group::Output of install command"
        . "$path"
        echo "::endgroup::"
        mv "$path" ${{ inputs.collect-info }}

    - name: Install solver dependencies (IDAES extensions)
      if: inputs.solver-dependencies == 'idaes-ext'
      shell: bash -l {0}
      run: |
        echo "::group::Output of 'idaes get-extensions'"
        idaes get-extensions --verbose
        echo "::endgroup::"

    - name: Install solver dependencies (conda-forge + Pyomo)
      if: inputs.solver-dependencies != 'idaes-ext'
      shell: bash -l {0}
      run: |
        echo "::group::Output of 'conda install'"
        conda install --quiet --yes -c conda-forge ipopt cmake
        echo "::endgroup::"
        echo "::group::Output of 'pyomo build-extensions'"
        pyomo build-extensions || python -c "from pyomo.contrib.pynumero.asl import AmplInterface; exit(0) if AmplInterface.available() else exit(1)"
        echo "::endgroup::"

    - name: Collect env info (pip freeze)
      shell: bash -l {0}
      env:
        path: ${{ inputs.collect-info }}/requirements.txt
      run: |
        pip freeze > "$path"

    - name: Collect env info (conda env export)
      shell: bash -l {0}
      if: inputs.conda-environment
      env:
        path: ${{ inputs.collect-info }}/environment.yml
      run: |
        conda env export -f "$path"

    - name: Save env info as artifact
      uses: actions/upload-artifact@v3
      with:
        path: ${{ inputs.collect-info }}
        name: ${{ inputs.collect-info }}

    - name: Remove collect-info directory
      if: inputs.collect-info
      shell: bash
      run: rm -rv "${{ inputs.collect-info }}"
