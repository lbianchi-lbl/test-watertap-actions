name: Pytest

on:
  workflow_call:
    inputs:

      repository:
        type: string
        required: false
        default: ${{ github.repository }}

      ref:
        type: string
        required: false
        default: ${{ github.ref }}

      variants-json:
        type: string
        description: Environment/installation variants to include in job combinations as a JSON array string
        required: false
        default: '["dev", "site"]'

      python-versions-json:
        type: string
        description: Python versions to include in job combinations as a JSON array string
        required: false
        default: '["3.8", "3.9", "3.10"]'

      platforms-json:
        type: string
        description: Platforms (OS variants) to include in job combinations as a JSON array string
        required: false
        default: '["linux", "win64", "macos"]'

      platform-to-runner-map-json:
        type: string
        description: JSON string representing mapping between platform and runner label
        required: false
        default: |
          {
              "linux": "ubuntu-20.04",
              "win64": "windows-2022",
              "macos": "macos-12",
              "": "ubuntu-latest"
          }

      pytest-flags:
        type: string
        description: Default flags to use for pytest
        required: false
        default: --pyargs watertap
      
      pytest-extra-flags:
        type: string
        description: Additional flags to pass to pytest
        required: false
        default: ''

      python-version-for-coverage:
        type: string
        description: Which of the Python versions used in the matrix to use to generate coverage report
        required: false
        default: '3.8'

      coverage-file:
        type: string
        description: File name for the coverage fiel
        required: false
        default: coverage.xml

defaults:
  run:
    shell: bash -l {0}

env:
  PYTEST_ADDOPTS: --color=yes ${{ inputs.pytest-flags }} ${{ inputs.pytest-extra-flags }}

jobs:

  run-pytest:
    name: pytest/${{ matrix.variant }}/${{ matrix.python-version }}/${{ matrix.platform }}
    runs-on: ${{ fromJSON(inputs.platform-to-runner-map-json)[matrix.platform] }}
    strategy:
      fail-fast: false
      matrix:
        variant: ${{ fromJSON(inputs.variants-json) }}
        python-version: ${{ fromJSON(inputs.python-versions-json) }}
        platform: ${{ fromJSON(inputs.platforms-json) }}
        include:
          - python-version: ${{ inputs.python-version-for-coverage }}
            variant: dev
            coverage: ${{ inputs.coverage-file }}

    steps:

      - uses: actions/checkout@v3
        if: matrix.variant == 'dev'
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: Install WaterTAP
        uses: lbianchi-lbl/test-watertap-actions/install@main
        with:
          conda-environment: watertap-env
          python-version: ${{ matrix.python-version }}
          variant: ${{ matrix.variant }}
          collect-info: install-info-${{ matrix.variant }}-${{ matrix.python-version }}-${{ matrix.platform }}

      - name: Add coverage options
        if: matrix.coverage
        run:
          echo "PYTEST_ADDOPTS=$PYTEST_ADDOPTS --cov-report=xml" >> $GITHUB_ENV

      - name: Run Pytest
        run:
          pytest

      - name: Upload coverage data as artifact
        uses: actions/upload-artifact@v3
        if: matrix.coverage
        with:
          name: coverage-${{ matrix.platform }}
          path: |
            .coverage
            coverage.xml

  upload-coverage:
    name: Upload coverage data (${{ matrix.platform }})
    needs: [run-pytest]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(inputs.platforms-json) }}

    steps:

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Make source code available to generate the coverage report locally
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: Download coverage data (${{ matrix.platform }})
        uses: actions/download-artifact@v3
        with:
          name: coverage-${{ matrix.platform }}

      - name: Upload coverage report (placeholder)
        run: |
          pip install --progress-bar off "coverage>=7"
          cat << EOF >> "$GITHUB_STEP_SUMMARY"
          ## Coverage report for ${{ matrix.platform }}

          <details><summary>Click to expand</summary>

          $(coverage report --data-file=.coverage --format=markdown)

          </details>
          EOF

